# install packages

npm i styled-components react-hook-form react-router-dom @apollo/client graphql react-helmet-async
npm i --save @fortawesome/fontawesome-svg-core
npm install --save @fortawesome/free-solid-svg-icons
npm install --save @fortawesome/react-fontawesome
npm install --save @fortawesome/free-brands-svg-icons
npm install --save @fortawesome/free-regular-svg-icons

# Router 
- Hash Router
-- react router does pattern matches. So more than one route can match if the link contain router's path

-- add switch to prevent pattern maatching

-- and add exact attribute for "/" home link

- Browser Router
-- needs more things to configure when deploy

- use <Redirect to="/" /> when nothing matches

- send props to components to change the state

- however it is bad idea to send props all the way down. Instead use apollo client Reactive Variabale.
# Reactive Variabale
- set Variabale
export const isLoggedInVar = makeVar(false);

- call variable
const isLoggedIn = useReactiveVar(isLoggedInVar);

- to set variable
isLoggedInVar(false)


#styled components
- use it to set styles easily like css

- use theme provider to set dark mode or light theme
-- surround all components with theme provider

- use global style
-- in global style , you have to tell where the css goes  (in the body or head??)
-- and <globalStyle> under the themeProvider
export const GlobalStyles = createGlobalStyle`
   body{
    background-color:  red;
   }
`;

-- also you can put props in the global style


- use styled reset to reset every css


- For browsing page, <a> refreshes everything so do not use it in application

# Link has attributes of <a> so css applies to both of them
- route only available for loggedin or not

{!isLoggedIn ? (
    <Route path="/sign-up">
    <SignUp />
    </Route>
) : null}


- you can pass props without using function and just export the styled component

# Header
- use Helmet

#React Hook Form 

-register
-- creates useSet value
--- just register and name it
          <Input
            ref={register({
              required: "Username is Required",
              minLength: 5,
              validate: (currentValue) => currentValue.includes("potato"),
              pattern : ""
            })}
            name="username"
            type="text"
            placeholder="Username"
          />
--- if you put async in validate you can check backhand even before user submits

# apollo client

- create client
export const client = new ApolloClient({
  uri: "http://localhost:4000/graphql",
  cache: new InMemoryCache(),
});

- wrap app with apollo

- use can use setError from useForm to get error message from backend
Now you can use both frontend error and backend error

- set token in frontend
    localStorage.setItem("token", token);

- use history go to route in function

- kill all previous states
window.location.reload();