# change header to check token
- check from graphql if token is actual user since you can change token in console

- to use token , setting local storage is not enough. You have to configure 
  apollo cllient with token

  -- concat authorized link and http link
  const httpLink = createHttpLink({
  uri: "http://localhost:4000/graphql",
});

const authLink = setContext((_, { headers }) => {
  return {
    headers: {
      ...headers,
      token: localStorage.getItem(TOKEN),
    },
  };
});

export const client = new ApolloClient({
  link: authLink.concat(httpLink),
  cache: new InMemoryCache(),
});



- refetchQueries in "useMutation" refetches another query to update the feed

  const [toggleLikeMutation, { loading }] = useMutation(TOGGLE_LIKE_MUTATION, {
    variables: {
      id,
    },
    refetchQueries: [{ query: FEED_QUERY }],
  });


export const FEED_QUERY = gql`
  query seeFeed {
    seeFeed {
      id
      user {
        username
        avatar
      }
      file
      caption
      likes
      comments
      createdAt
      isMine
      isLiked
    }
  }
`;

-- if it has variables then 
refetchQueries: [{ query: FEED_QUERY , variables : {....} }],
-- the problem is refetching whole feed , so it is not efficient

#write fragment

- in "useMutation" , there is update property
(cache , data) =>{}

- id of fragment is 'type:id'
fragment is piece of data that can be changed by gql

--example code of writeFragment
function Photo({ id, user, file, isLiked, likes }) {
  const updateToggleLike = (cache, result) => {
    const {
      data: {
        toggleLike: { ok },
      },
    } = result;
    if (ok) {
      cache.writeFragment({
        id: `Photo:${id}`,
        fragment: gql`
          fragment BSName on Photo {
            isLiked
          }
        `,
        data: {
          isLiked: !isLiked,
        },
      });
    }
  };
  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE_MUTATION, {
    variables: {
      id,
    },
    update: updateToggleLike,
  });

- you can also readFragment to get props when you do not have the props in the component
const result = cache.readFragment({
        id: fragmentId,
        fragment,
      });
const { isLiked: cacheIsLiked, likes: cacheLikes } = result;

-- now you start write fragment again

# put innher html
- install
npm i sanitize-html@^2.3.2

- allow only specified tag by allowing it

  console.log(
    sanitizeHtml(payload.replace(/#[\w]+/g, "<mark>$&</mark>"), {
      allowedTags: ["mark"],
    })
  );


- react.fragment allows key into empty space


# better way to write cache

- use "modify"
cache.modify({
    id : photoId,
    fields :{
        isLiked(prev){
            return !prev;
        }
    }
})

- to fake comment in update, you need to get an id at least

- you can easily delete in cache
cache.evict 